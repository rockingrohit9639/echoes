generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                   String  @db.ObjectId
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
    userId       String   @db.ObjectId
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    welcomeMessage String?

    accounts Account[]
    sessions Session[]
    stories  Story[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Story {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title               String
    genre               String
    base                String
    characterName       String
    characterAppearance String
    isCompleted         Boolean @default(false)

    messages Message[]

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum MessageFrom {
    ai
    human
    system
}

model Message {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    from    MessageFrom
    content String

    story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
    storyId String @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
